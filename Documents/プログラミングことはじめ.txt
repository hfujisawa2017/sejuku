プログラミングことはじめ

主に　製品　としてのプログラムを作成することを意識したスタートアップガイドです。

○プログラミング一般
一般的にプログラミングをする上で言語によらずに気にすべきことを説明します。

・読みやすいプログラムを心がける
　我々が学ぶのは業務プログラミングです。というか個人のクローズドな世界ではなくオープンに見られる可能性のあるプログラムを作ること。
　これを意識してほしいです。
　作成したプログラムを販売するということは買った人はできるだけ安く長く使いたいと思っています。
　なのでメンテナンスが必要になります。メンテナンスする人は作った人であるとは限りません。
　作った人でなくても理解しやすいプログラミングを心がけることでコスト抑えることにもつながります。
　よいプログラムはそれ自体がドキュメントと言えるかもしれません。

　・インデント
　　参考：http://wa3.i-3-i.info/word11331.html

　・名前に気を使う
　　例えば人の名前を保存する変数名：A　name、B　personNm、C　a
　　→Cは論外。何を示しているのか理解できないため。
　　　Bはいつでも使えそう。何を示しているのか明快。ただし長い。
　　　Aは悪くない。でもペットの名前も必要だったら？という場合もあるので使うシーンによりそう。

　・略記よりも分かりやすさ優先
　　例えば上記の　personNm　は　pName　とも書けます。
　　ただこれでは内容が分かりづらいです。personNmと考える人もいればpageNameと考える人もいそうです。
　　できるだけその名前が登場した個所だけで意味をつかめるようにしましょう。
　　この場合はやはり　personNm　の方がよいでしょう。

　・適切な設計
　　最近のプログラミングはオブジェクト指向が主流です。
　　オブジェクト指向では　属性と手続き　をまとめてオブジェクトを作ります。
　　そしてオブジェクト間の相互作用によってプログラム　＞　システムを構築していきます。
　　このときオブジェクトの粒度に注意しましょう。
　　例えば犬、猫を表現するオブジェクトを設計するとき
　　動物であるという共通点に着目するとAnimalというクラスが考えられます。
　　しかし動物という共通点はあまりに粒度が大きく人や鳥なども含まれます。
　　すると属性には種族、生活域、言語など多くの項目が必要になります。また手続きとしては歩行方法なども必要でしょう。
　　つまり動物オブジェクトを作ると犬と猫を識別するために多くの違いを設定する必要があります。
　　この場合はDogクラス、Catクラスを作るのは妥当でしょう。
　　そうすれば種族、言語は設定する必要はなくそれぞれ決まります。歩行方法も決まるでしょう。
　　このようにうまく設計することでそのオブジェクトが何を示しているのか？を詳細を確認するまでもなく理解することができます。

・信頼性について検討する／工数意識を持つ

　業務プログラミングでは　正しく動くこと　が重要になります。
　最悪なのは　動いているけど間違った結果を導く　ことです。
　特に最悪パターンは強く意識してください。動かない方がマシです。

　・テスト
　　信頼性を向上させるためにはやはりテストは欠かせません。
　　現代のテストは自動化を念頭に開発フェーズに組み込まれることが多いです。
　　特に我々フリーランスでは手数が不足しがちです。テストを自動化することで信頼性の向上と工数の削減を実現できます。
　　テスト自動化の実体は　プログラムをテストをするためのプログラム　です。
　　つまり自動化するためにプログラミングが必要で、余計な工数がかかるということも事実です。
　　ですが通常プログラムは一度作成して終わりにはならず、修正＞テストの反復、新機能追加＞テスト　のようにテストは繰り返されます。
　　テスト自動化により二度目以降のテスト工数を大幅に削減できます。

　　ここで重要なのは
　　①テスト自動化には工数がかかる
　　②プログラムを修正したら合わせてテストプログラムも修正する

　　この二点の意識を忘れないでください。

　・ライブラリ
　　近年ではネットワークの発達と、優秀なエンジニアたちの貢献により信頼性が高いソフトウェアを無償で利用できる環境が整っています。
　　我々はプログラムを提供するエンジニア側に属しますが、同じようにこれらの恩恵を受けることができます。
　　ライブラリという仕組みはソフトウェアをより細かなの　部品　の単位でまとめたパッケージです。
　　たとえばWEBの世界でプログラミングするためには通信を行うプログラミングが必要です。
　　通信というのは根本的に複雑な世界です。通信先を探して、通信先にデータを送って、送られてきたデータを読み込んで、理解して、受け取ったことを送信元に返す。
　　さらに失敗した場合の対処方法、有線、無線の違い。ノイズ制御など考えることはたくさんあります。

　　これらをまとめてやってくれるライブラリが存在します。
　　ライブラリを使うことで通信のプロフェッショナルでなくともプログラミングに通信を取り入れることができます。

　　またライブラリは別途テストされているため我々が再テストする必要はありません。
　　この観点では信頼性向上、工数の削減なども行えるでしょう。

　・API
　　ライブラリと同じメリットがあります。
　　違いは使い方です。ライブラリの場合は自身の端末やサーバにライブラリモジュールをインストールする必要があります。
　　APIの場合はそれ自体がネットワーク上で動作する一式揃ったプログラムです。
　　例えば　https://xxx.co.jp/api/search?q=プログラミング　のように呼び出すことができます。
　　つまり通常のネットサーフィンのノリでプログラムを起動して結果を得ることができます。

　・オープンデータ
　　我々フリーランスの場合、もっとも企業と戦いづらいシーンの一つにデータの確保があります。
　　企業の場合、人手によって多くのデータを集めて、精査して品質をあげることができます。
　　ですが我々の場合は手数が限られるためデータを集めることが難しいです。

　　上記のAPIにも通じますが現代では　オープンデータ　という考え方が根付いてきました。
　　たとえば国や自治体はGISデータというGPS連動データを公開しています。これには地域の観光資源の種類、位置など、路線バスのバス停の位置などが含まれています。
　　これらを使えば自分の足を使わずに地域の観光スポットを紹介するようなサービスを考えることができます。
　　参考：http://nlftp.mlit.go.jp/ksj/

　　また一般的な企業　たとえばリクルートは自社のサービスをAPI化してデータを公開しています。
　　こうすることで自社サービスの外からでも集客できることが彼らのメリットでしょう。
　　我々としても質の高いグルメ情報を自身のサービスに組み込めることは大きなメリットです。
　　参考：https://webservice.recruit.co.jp/hotpepper/

　　こうしたデータを使うことで信頼性、工数の削減を実現できます。

・現実世界の目的意識を忘れない


○HTML／CSS

